Danny Lei - 164700197
OOP345 - WS8
07/25/21

Through this weeks workshop, we learned and incorporated smart pointers into our program. The main advantage of using smart pointers compared to raw pointers is that it automatically helps us manage memory in terms of deallocating it during the pointers destruction.
EX.
	Utilities::mergeRaw(...):
		Product *p = new Product(desc[i].desc, price[j].price);	<--- creates object through new

		p->validate();	
		priceList += p;

		delete p;	<--- deallocation of object after use

		<end of scope>

	Utilities::mergeSmart(...):
		std::unique_ptr<Product> p(new Product(desc[i].desc, price[j].price));	<---creation of object through new; wrapped in smart pointer

		p->validate();
		priceList += p;

		<end of scope>	<--- no manual deallocation needed as it is handled by unique_ptr

The main difference between dealing with raw and smart pointers in the workshop came from the deallocation of memory - as it is handled automatically in regards to smart pointers but for raw pointers, it would need to be done manually. Another difference would be that of creation of the objects as with the raw pointer we just use 'new' as we have been doing so far this semester - but to use it with a smart pointer, we would also need to wrap it in either a unique_ptr, shared_ptr or custom made smart pointer. Any other functions that handle the pointer would also need to be overloaded to handle a smart pointer - in the case of our workshop, the += operator was to be overloaded in order to accept a smart pointer as parameter.
ex: void operator+=(const std::unique_ptr<T> &obj)